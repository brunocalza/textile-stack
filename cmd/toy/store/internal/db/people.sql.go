// Code generated by sqlc. DO NOT EDIT.
// source: people.sql

package db

import (
	"context"
	"database/sql"
)

const createPerson = `-- name: CreatePerson :exec
INSERT INTO people (id,name,email,pb_data)
VALUES ($1,$2,$3,$4)
`

type CreatePersonParams struct {
	ID     int32          `json:"id"`
	Name   string         `json:"name"`
	Email  sql.NullString `json:"email"`
	PbData []byte         `json:"pbData"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) error {
	_, err := q.exec(ctx, q.createPersonStmt, createPerson,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PbData,
	)
	return err
}

const listPeople = `-- name: ListPeople :many
SELECT id, name, email, pb_data, created_at FROM people
`

func (q *Queries) ListPeople(ctx context.Context) ([]Person, error) {
	rows, err := q.query(ctx, q.listPeopleStmt, listPeople)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PbData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
